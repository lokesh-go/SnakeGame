/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snakegame;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author Lokesh Chandra
 */
public class SnakeGame extends javax.swing.JFrame implements KeyListener, ActionListener{

    /**
     * Creates new form SnakeGame
     */
    
    private int [] snakeXlength = new int[750];
    private int [] snakeYlength = new int[750];
    
    private boolean left = false;   // for the key pressed ..........
    private boolean right = false;
    private boolean up = false;
    private boolean down = false;
    
    private ImageIcon rigthmouth,leftmouth,upmouth,downmouth,snakeimage; // after key pressed snake move action changed
    private int lengthofsnake = 3, moves = 0;
    Timer timer;
    public SnakeGame() {
        initComponents();
        
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        
        timer = new Timer(100, this);
        timer.start();

        setLocationRelativeTo(null);
    }

    
    public void ourCustomPaintingMethod(Graphics g)
    {   
        if(moves == 0){
            snakeXlength[0] = 100;
            snakeXlength[1] = 75;
            snakeXlength[2] = 50;
            
            snakeYlength[0] = 25;
            snakeYlength[1] = 25;
            snakeYlength[2] = 25;
            
        }
        
        URL rurl = getClass().getResource("/snakegame/images/rightmouth.png");
        URL lurl = getClass().getResource("/snakegame/images/leftmouth.png");
        URL uurl = getClass().getResource("/snakegame/images/upmouth.png");
        URL durl = getClass().getResource("/snakegame/images/downmouth.png");
        URL snk = getClass().getResource("/snakegame/images/snakeimage.png");
        
        rigthmouth = new ImageIcon(rurl);
        rigthmouth.paintIcon(this, g, snakeXlength[0], snakeYlength[0]);
        
        for(int i=0; i<lengthofsnake; i++){
            
            if(i ==0 && right){
                rigthmouth = new ImageIcon(rurl);
                rigthmouth.paintIcon(this, g, snakeXlength[0], snakeYlength[0]);
            } 
            if(i == 0 && left){
                leftmouth = new ImageIcon(lurl);
                leftmouth.paintIcon(this, g, snakeXlength[0], snakeYlength[0]);
            }
            if(i ==0 && down){
                downmouth = new ImageIcon(durl);
                downmouth.paintIcon(this, g, snakeXlength[0], snakeYlength[0]);
            }
            if(i == 0 && up){
                upmouth = new ImageIcon(uurl);
                upmouth.paintIcon(this, g, snakeXlength[0], snakeYlength[0]);
            }
            
            // for snake body ..
            
            if( i != 0){
                snakeimage = new ImageIcon(snk);
                snakeimage.paintIcon(this, g, snakeXlength[i], snakeYlength[i]);
            }
            
        }
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel()
        {
            public void paint(Graphics g)
            {
                super.paint(g);
                ourCustomPaintingMethod(g);
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("HP Simplified Light", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 255, 51));
        jLabel1.setText("Snake Game");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 170, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 750, 60));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 255, 51), new java.awt.Color(51, 255, 51), new java.awt.Color(102, 255, 51), new java.awt.Color(51, 255, 51)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 746, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 546, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 750, 550));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 640));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnakeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnakeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnakeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnakeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnakeGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
        
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if(e.getKeyCode() == KeyEvent.VK_RIGHT){
            moves++;
            right = true;
            
            // preventing to colide .....
            
            if(!left){
                right = true;
            }
            else
            {
                right = false;
                left = true;
            }
            
 
            up = false;
            down = false;
            
        }
        if(e.getKeyCode() == KeyEvent.VK_LEFT){
            moves++;
            left = true;
            
            // preventing to colide .....
            
            if(!right){
                left = true;
            }
            else
            {
                left = false;
                right = true;
            }
            
 
            up = false;
            down = false;
            
        }
        if(e.getKeyCode() == KeyEvent.VK_UP){
            moves++;
            up = true;
            
            // preventing to colide .....
            
            if(!down){
                up = true;
            }
            else
            {
                up = false;
                down = true;
            }
            
 
            left = false;
            right = false;
            
        }
        if(e.getKeyCode() == KeyEvent.VK_DOWN){
            moves++;
            down = true;
            
            // preventing to colide .....
            
            if(!up){
                down = true;
            }
            else
            {
                down = false;
                up = true;
            }
            
 
            left = false;
            right = false;
            
        }
        
        
        
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        timer.start();
        if(right){
            for(int r = lengthofsnake-1; r>=0; r-- )
            {
                snakeYlength[r+1] = snakeYlength[r];   // move the value of y indexes ....
            }
            for(int r = lengthofsnake; r>=0 ; r--){
                if(r == 0)
                {
                    snakeXlength[r] = snakeXlength[r] + 25; //  snake head move with 25 value ahead ....
                    
                }
                else
                {
                    snakeXlength[r] = snakeXlength[r-1]; // shifting snake body value further ....
                }
                if(snakeXlength[r] > 725)
                {
                    snakeXlength[r] = 0;
                }
            }
            repaint();
        }
        if(left){
                for(int r = lengthofsnake-1; r>=0; r-- )
                {
                    snakeYlength[r+1] = snakeYlength[r];   // move the value of y indexes ....
                }
                for(int r = lengthofsnake; r>=0 ; r--){
                    if(r == 0)
                    {
                        snakeXlength[r] = snakeXlength[r] - 25; //  snake head move with 25 value ahead ....
                    }
                    else
                    {
                        snakeXlength[r] = snakeXlength[r-1]; //  shifting snake body value further ....
                    }
                    if(snakeXlength[r] < 0)
                    {
                        snakeXlength[r] = 725;
                    }
                }
                repaint();
        }
        if(up)
        {
            for(int r = lengthofsnake-1; r>=0; r-- )
                {
                    snakeXlength[r+1] = snakeXlength[r];   //   move the value of y indexes ....
                }
                for(int r = lengthofsnake; r>=0 ; r--){
                    if(r == 0)
                    {
                        snakeYlength[r] = snakeYlength[r] - 25; //  snake head move with 25 value ahead ....

                    }
                    else
                    {
                        snakeYlength[r] = snakeYlength[r-1]; //  shifting snake body value further ....
                    }
                    if(snakeYlength[r] < 0)
                    {
                        snakeYlength[r] = 525;
                    }
                }
                repaint();
            
        }
        if(down)
        {
                for(int r = lengthofsnake-1; r>=0; r-- )
                {
                    snakeXlength[r+1] = snakeXlength[r];   // move the value of y indexes ....
                }
                for(int r = lengthofsnake; r>=0 ; r--){
                    if(r == 0)
                    {
                        snakeYlength[r] = snakeYlength[r] + 25; //  snake head move with 25 value ahead ....

                    }
                    else
                    {
                        snakeYlength[r] = snakeYlength[r-1]; // shifting snake body value further ....
                    }
                    if(snakeYlength[r] > 525)
                    {
                        snakeYlength[r] = 0;
                    }
                }
                repaint();
        }
        
    }
}
